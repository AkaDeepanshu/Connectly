generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CallSessions {
  id           BigInt    @id @default(autoincrement())
  room_id      BigInt?
  initiator_id BigInt?
  call_type    String    @db.VarChar(50)
  status       String?   @default("ongoing") @db.VarChar(50)
  started_at   DateTime? @db.Timestamptz(6)
  ended_at     DateTime? @db.Timestamp(6)
  User         User?     @relation(fields: [initiator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ChatRoom     ChatRoom? @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ChatRoom {
  id            BigInt          @id @default(autoincrement())
  room_name     String?         @db.VarChar(255)
  is_group      Boolean
  profile_pic   String?         @db.VarChar(255)
  description   String?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  CallSessions  CallSessions[]
  ChatRoomUsers ChatRoomUsers[]
  Message       Message[]
  Notifications Notifications[]
}

model ChatRoomUsers {
  id        BigInt    @id @default(autoincrement())
  room_id   BigInt?
  user_id   BigInt?
  role      String?   @default("member") @db.VarChar(50)
  joined_at DateTime? @default(now()) @db.Timestamp(6)
  ChatRoom  ChatRoom? @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User      User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([room_id, user_id])
  @@index([room_id], map: "idx_chatroomusers_room")
  @@index([user_id], map: "idx_chatroomusers_user")
}

model Message {
  id                 BigInt               @id @default(autoincrement())
  room_id            BigInt?
  sender_id          BigInt?
  content            String?
  type               String?              @default("text") @db.VarChar(50)
  is_deleted         Boolean?             @default(false)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  ChatRoom           ChatRoom?            @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User               User?                @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  MessageAttachments MessageAttachments[]
  MessageReactions   MessageReactions[]
  MessageRead        MessageRead[]
  Notifications      Notifications[]

  @@index([room_id], map: "idx_message_room")
  @@index([sender_id], map: "idx_message_sender")
}

model MessageAttachments {
  id          BigInt    @id @default(autoincrement())
  message_id  BigInt?
  file_url    String    @db.VarChar(255)
  file_type   String    @db.VarChar(50)
  uploaded_at DateTime? @default(now()) @db.Timestamp(6)
  Message     Message?  @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model MessageReactions {
  id         BigInt    @id @default(autoincrement())
  message_id BigInt?
  user_id    BigInt?
  reaction   String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  Message    Message?  @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([message_id, user_id, reaction])
}

model MessageRead {
  id         BigInt    @id @default(autoincrement())
  message_id BigInt?
  user_id    BigInt?
  read_at    DateTime? @default(now()) @db.Timestamp(6)
  Message    Message?  @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([message_id, user_id])
}

model Notifications {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt?
  type       String    @db.VarChar(50)
  message_id BigInt?
  room_id    BigInt?
  content    String
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  Message    Message?  @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ChatRoom   ChatRoom? @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                                           BigInt             @id @default(autoincrement())
  name                                         String             @db.VarChar(255)
  email                                        String             @unique @db.VarChar(255)
  username                                     String             @unique @db.VarChar(255)
  password                                     String             @db.VarChar(255)
  is_active                                    Boolean?           @default(true)
  is_deleted                                   Boolean?           @default(false)
  profile_pic                                  String?            @db.VarChar(255)
  created_at                                   DateTime?          @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime?          @default(now()) @db.Timestamp(6)
  CallSessions                                 CallSessions[]
  ChatRoomUsers                                ChatRoomUsers[]
  Message                                      Message[]
  MessageReactions                             MessageReactions[]
  MessageRead                                  MessageRead[]
  Notifications                                Notifications[]
  UserBlockList_UserBlockList_blocked_idToUser UserBlockList[]    @relation("UserBlockList_blocked_idToUser")
  UserBlockList_UserBlockList_blocker_idToUser UserBlockList[]    @relation("UserBlockList_blocker_idToUser")
  UserProfile                                  UserProfile?
}

model UserBlockList {
  id                                  BigInt    @id @default(autoincrement())
  blocker_id                          BigInt?
  blocked_id                          BigInt?
  blocked_at                          DateTime? @default(now()) @db.Timestamp(6)
  User_UserBlockList_blocked_idToUser User?     @relation("UserBlockList_blocked_idToUser", fields: [blocked_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_UserBlockList_blocker_idToUser User?     @relation("UserBlockList_blocker_idToUser", fields: [blocker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([blocker_id, blocked_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model UserProfile {
  id       BigInt    @id @default(autoincrement())
  user_id  BigInt?   @unique
  gender   String?   @db.VarChar(20)
  dob      DateTime? @db.Date
  bio      String?   @db.VarChar(500)
  settings Json?     @default("{}")
  User     User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
